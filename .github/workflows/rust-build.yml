name: Rust Build & Test

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: nixcode-cli

jobs:
  build:
    name: Build and test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-
    
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --all-features

  release:
    name: Create release artifacts
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: nixcode-cli-linux-amd64
            asset_name: nixcode-cli-linux-amd64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: nixcode-cli-macos-amd64
            asset_name: nixcode-cli-macos-amd64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: nixcode-cli-macos-arm64
            asset_name: nixcode-cli-macos-arm64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: nixcode-cli-windows-amd64
            asset_name: nixcode-cli-windows-amd64.zip

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} -p nixcode-cli
      
      - name: Prepare artifacts [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.asset_name }} ${{ env.BINARY_NAME }}.exe
          cd -
      
      - name: Prepare artifacts [Unix]
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.asset_name }} ${{ env.BINARY_NAME }}
          cd -
      
      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}